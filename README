A simple stack based calculator. Using Reverse Polish notation one may input either an integer or a command. An integer will simply be pushed directly
to the stack and is of one of the two forms:

        ('$' / '0x') ['-'] *HEXDIG

or

        ['-'] *DIGIT

i.e: `$1A`, `0x1A`, `26

A command takes some number of arguments on the stack (labeled a, b, c, and so on pushed in order to their letter reference) pops them, uses there values to
produce some result and then outputs their result either to the stack or to the terminal. The commands are as follows:

        '+' / 'add'
                returns a + b
        '-' / 'sub'
                returns a - b
        '*' / 'mul'
                returns a * b
        '/' / 'div'
                returns a / b
        '%' / 'mod'
                returns a % b
        '&' / 'and'
                returns a & b
        '|' / 'or'
                returns a | b
        '~' / 'not'
                returns ~a
        '<' / 'shl'
                returns a << b
        '>' / 'shr'
                returns a >> b
        ':' / 'segaddr'
                returns ((a & 0xFFFF) << 4) + b
        '@' / 'chs'
                returns (a * HEADS + b) * SECTORS + (c - 1)
        '?' / 'cond'
                returns (c ? a : b)
        '!' / 'lnot'
                returns !a
        '.' / 'dup'
                returns a twice
        ',' / drop
                removes a from the stack and returns nothing
        'hex'
                prints '%X', a
        'print'
                prints '%d', a
        'sectors'
                SECTORS = a
        'heads'
                HEADS = a
        'exit'
                halt program
        'label'
                LABEL[a] = CUR_INSTR
        'goto'
                GOTO LABEL[a]
        'gotoif'
                IF a != 0 THEN GOTO LABEL[b]
        'get'
                returns the a^th element of the stack...
                i.e:
                        1 2 3 0 get 1 get 2 get print print print print print print
                prints:
                        1
                        2
                        3
                        3
                        2
                        1

Comments are placed between occurrences of '\'
